const { Pagination } = require('../../paginators')
const { ObjectId } = require('./connection')

class BaseRepository {
  constructor (name, schema, connector) {
		this.name = name
		this.schema = schema
    this.connector = connector
  }

  convertToObjectId (id) { return new ObjectId(id) }

  async create (body) {
		const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
    const created = await model.create(body)
    return created
  }

  async paginate (params) {
		const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
    const data = await new Pagination(model, params).getReturn()
    return data
  }

  async find (params) {
		const connection = await this.connector.createConnection()
    const model = connection.model(this.name, this.schema)
    let { select, limit, offset, sort, lean , query } = params

    lean = lean || false

    const data = await model.find(query)
      .select(select)
      .limit(limit)
      .skip(offset)
      .sort(sort)
      .lean(lean)

    return data
  }

  async findOne (select) {
    const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
    const data = await model.findOne(select)
    return data
  }

  async findById (_id) {
    _id = await this.convertToObjectId(_id)
    const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
    const object = await model.findById(_id)
    return object
  }

  async delete (modelObject) {
    await modelObject.remove()
  }

  async save (modelObject) {
    await modelObject.save()
  }

  async aggregate (params) {
    const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
    const data = await model.aggregate(params)
    return data
  }

  async update (conditions, body) {
    const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
    body.updatedAt = new Date()
    const data = await model.update(conditions, body)
    return data
	}
	
	async getModel () {
		const connection = await this.connector.createConnection()
		const model = connection.model(this.name, this.schema)
		return model
	}
}

module.exports.BaseRepository = BaseRepository
