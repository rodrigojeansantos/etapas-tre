const axios = require('axios')

const { ResponseUnauthorizedException, ResponseNotFoundException } = require('../http')
const { UNAUTHORIZED, NOT_FOUND } = require('../http/status-code')

const {
  CLUB_API_AUTH_ADMIN,
  CLUB_API_AUTH_ADMINPASS,
  CLUB_API_AUTH_CLIENTID,
  CLUB_API_AUTH_SECRECT
} = process.env

class AuthIntegration {
  constructor () {
    this.authAxiosInstance = axios.create({
      baseURL: process.env.CLUB_API_AUTH_URI
    })
  }

  async createUser ({ _id, firstName, lastName, email, password }) {
    const { data } = await this.authAxiosInstance.post(`/account`,
      {
        firstName,
        lastName,
        email,
        password,
        clientId: CLUB_API_AUTH_CLIENTID,
        customData: {
          userId: _id
        }
      })
    return data
  }

  async getToken ({ email, password }) {
    try {
      const { data } = await this.authAxiosInstance.post(`/oauth/web`, {
        username: email,
        password: password,
        grant_type: 'password',
        client_id: CLUB_API_AUTH_CLIENTID,
        client_secret: CLUB_API_AUTH_SECRECT
      })
      return data
    } catch (error) {
      switch (error.response.status) {
        case NOT_FOUND :
          throw new ResponseNotFoundException('User not found')
        case UNAUTHORIZED :
          throw new ResponseUnauthorizedException('Access unauthorized')
        default :
          throw error
      }
    }
  }

  async refreshToken (refreshToken) {
    const { data } = await this.authAxiosInstance.post(`/oauth/web/refresh_token`, {
      refresh_token: refreshToken,
      grant_type: 'refresh_token',
      client_id: CLUB_API_AUTH_CLIENTID,
      client_secret: CLUB_API_AUTH_SECRECT
    })

    return data
  }

  async changePassword ({ authId, password }) {
    const dataAccess = await this.getToken({
      email: CLUB_API_AUTH_ADMIN,
      password: CLUB_API_AUTH_ADMINPASS
    })
    const { data } = await this.authAxiosInstance.post(`/account/${authId}/change-password`, { password },
      { headers: { Authorization: `Bearer ${dataAccess.access_token}` } }
    )
    return data
  }

  async delete ({ _id }) {
    const dataAccess = await this.getToken({
      email: CLUB_API_AUTH_ADMIN,
      password: CLUB_API_AUTH_ADMINPASS
    })
    const { data } = await this.authAxiosInstance.delete(`/account/${_id}`, {
      headers: { Authorization: `Bearer ${dataAccess.access_token}` }
    })
    return data
  }
}

module.exports = new AuthIntegration()
