const axios = require('axios')

class SerproIntegration {
	constructor() {
		const {
			INVOICE_API_SERPRO_URL,
		} = process.env

		this.axiosInstance = axios.create({
			baseURL: INVOICE_API_SERPRO_URL
		})
	}

	async getToken() {
		const {
			INVOICE_API_SERPRO_AUTH
		} = process.env
		const { data } = await this.axiosInstance.post('/token', 'grant_type=client_credentials', {
			headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': `${INVOICE_API_SERPRO_AUTH}`
      }
		})

		const { access_token: accessToken } = data
		return accessToken
	}

	async getData (keyAccess, token) {
		const { data } = await this.axiosInstance.get(`/nfe/1/${keyAccess}`, { headers: { 'Authorization': `Bearer ${token}` } })
		return data
	}

	parseProduct(item) {
		return {
			order: item.nItem,
			name: item.prod.xProd,
			description: item.prod.xProd,
			unitaryValue: item.prod.vUnCom,
			quantity: item.prod.qCom,
			classification: '',
			action: '',
			itemNumber: item.nItem,
			commercial: {
				unit: item.prod.uCom,
				quantity: item.prod.qCom,
				value: item.prod.vUnCom
			},
			tributary: {
				unit: item.prod.uTrib,
				quantity: item.prod.qTrib,
				value: item.prod.vUnTrib
			},
			value: item.prod.vProd,
			discount: item.prod.vDesc,
			freight: item.prod.vFrete
		}	
	}

	async parseData (serproData) {
		try {
			const { nfeProc } = serproData
			const { NFe, versao } = nfeProc
			const { infNFe } = NFe
			const { det } = NFe.infNFe
			const { ide } = infNFe
			
			const issueDate = ide.dhEmi
			const products = await det.map(item => this.parseProduct(item))
			return { versao: parseFloat(versao), issueDate, products}
		} catch (parseError) {
			return { parseError }
		}
	}
}

module.exports = new SerproIntegration()