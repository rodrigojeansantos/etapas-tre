const {
	OK, 
	CREATED_OK,
	NOT_CONTENT,
	NOT_FOUND,
	BAD_REQUEST,
	UNPROCESSABLE_ENTITY,
	UNAUTHORIZED,
	INTERNAL_ERROR
} = require('./status-code')
const graylogIntegration = require('./../integrations/graylog')

const {
	ResponseNotFoundException,
	ResponseUnprocessableEntityException,
	ResponseBadRequestException,
	ResponseUnauthorizedException
} = require('./exceptions')

class ResponseBase {
	constructor() {
		this.headers = {
			'Access-Control-Allow-Origin': '*',
			'Access-Control-Allow-Credentials': true
		}
	}
}

class Response extends ResponseBase {
	constructor(statusCode, body = { }) {
		super()
		this.statusCode = statusCode
		this.body = JSON.stringify(body)
	}
}

class ResponseOK extends ResponseBase {
	constructor(body = {}) {
		super()
		this.statusCode = OK
		this.body = JSON.stringify(body)
	}
}

class ResponseCreated extends ResponseBase {
	constructor(body = {}) {
		super()
		this.statusCode = CREATED_OK
		this.body = JSON.stringify(body)
	}
}

class ResponseNotContent extends ResponseBase {
	constructor() {
		super()
		this.statusCode = NOT_CONTENT
		this.body = null
	}
}

class ResponseError extends ResponseBase {
	constructor(e, origin = 'internal') {
		super()
		graylogIntegration.log(origin, 'ResponseError', e)
		
		if ( e instanceof ResponseNotFoundException ) {
			this.statusCode = NOT_FOUND
			this.body = this.mountBody(e.message, NOT_FOUND, origin) 
		} else if (e instanceof ResponseUnprocessableEntityException ) {
			this.statusCode = UNPROCESSABLE_ENTITY
			this.body = this.mountBody(e.message, UNPROCESSABLE_ENTITY, origin, e.data) 
		} else if (e instanceof ResponseBadRequestException) {
			this.statusCode = BAD_REQUEST
			this.body = this.mountBody(e.message, BAD_REQUEST, origin, e.data) 
		} else if (e instanceof ResponseUnauthorizedException) {
			this.statusCode = UNAUTHORIZED
			this.body = this.mountBody(e.message, UNAUTHORIZED, origin) 
		} else {
			this.statusCode = INTERNAL_ERROR
			this.body = this.mountBody(e.message, INTERNAL_ERROR, origin) 
		}
	}

	mountBody (message, errorCode, origin, data = null) {
		return JSON.stringify({ message, errorCode, origin, data })
	}
}

module.exports.Response = Response
module.exports.ResponseOK = ResponseOK
module.exports.ResponseCreated = ResponseCreated
module.exports.ResponseNotContent = ResponseNotContent
module.exports.ResponseError = ResponseError